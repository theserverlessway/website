Resources:
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PostPushHookLambdaFunction}"
  PostPushHookLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "{{ code('hook.py') }}"
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Environment:
        Variables:
          CodeBuildProject: !Sub '${AWS::StackName}-build'
  LambdaExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: "/"
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Effect: Allow
            Resource: "arn:aws:logs:*:*:*"
          - Action:
              - "codebuild:StartBuild"
            Effect: Allow
            # We can't use a ref here as it would lead to a
            # cyclic dependency between CodeBuild, CodeCommit and the Lambda
            Resource: !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${AWS::StackName}-build'
          Version: '2012-10-17'
        PolicyName: root
    Type: AWS::IAM::Role
  LambdaInvokePermission:
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !Ref PostPushHookLambdaFunction
        Principal: codecommit.amazonaws.com
        SourceAccount: !Ref AWS::AccountId
        SourceArn: !GetAtt CodeCommitRepository.Arn
      Type: AWS::Lambda::Permission